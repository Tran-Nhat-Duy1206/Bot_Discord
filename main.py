import discord 
from discord.ext import commands
import os
from dotenv import load_dotenv 
import logging
import aiohttp 

load_dotenv()

TOKEN = os.getenv('DISCORD_TOKEN')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')
UNSPLASH_API_KEY = os.getenv('UNSPLASH_API_KEY')
NEWS_API_KEY = os.getenv('NEWS_API_KEY')
THE_MOVIE_DB_API_KEY = os.getenv('THE_MOVIE_DB_API_KEY')

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

class Bot_No_Le(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix="-", intents=intents)

    async def setup_hook(self):
        await self.tree.sync()
        print("‚úÖ Slash command ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô h√≥a.")

bot = Bot_No_Le()

@bot.event
async def on_ready():
    print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: {bot.user}")
    await bot.change_presence(activity=discord.Game(name="N√¥ l·ªá m·ªçi nh√†!"))

@bot.event
async def on_message(message): 
    if message.author == bot.user:
        return 
    
    lower = message.content.lower()
    if "hello" in lower or "xin ch√†o" in lower:
        await message.channel.send(f'Ch√†o {message.author.mention}!')
    if "b·∫°n t√™n g√¨" in lower:
        await message.channel.send(f'T√™n t√¥i l√† {bot.user.name}!')
    if "bye" in lower:
        await message.channel.send(f'Bye {message.author.mention}')

    await bot.process_commands(message)

@bot.command()
async def my_help(ctx):
    embed = discord.Embed(title="H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot", description="D∆∞·ªõi ƒë√¢y l√† c√°c l·ªánh c√≥ s·∫µn:", color=discord.Color.blue())
    prefix = "-"
    embed.add_field(name=f"{prefix}my_help", value="Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot.", inline=False)
    embed.add_field(name=f"{prefix}votee <c√¢u h·ªèi>", value="T·∫°o m·ªôt cu·ªôc b·ªè phi·∫øu v·ªõi c√¢u h·ªèi b·∫°n cung c·∫•p.", inline=False)
    embed.add_field(name=f"{prefix}thoitiet <th√†nh ph·ªë>", value="Hi·ªÉn th·ªã th·ªùi ti·∫øt hi·ªán t·∫°i c·ªßa th√†nh ph·ªë b·∫°n cung c·∫•p.", inline=False)
    embed.add_field(name=f"{prefix}nhietdo <th√†nh ph·ªë>", value="Hi·ªÉn th·ªã nhi·ªát ƒë·ªô hi·ªán t·∫°i c·ªßa th√†nh ph·ªë b·∫°n cung c·∫•p.", inline=False)
    embed.add_field(name=f"{prefix}do_am <th√†nh ph·ªë>", value="Hi·ªÉn th·ªã ƒë·ªô ·∫©m hi·ªán t·∫°i c·ªßa th√†nh ph·ªë b·∫°n cung c·∫•p.", inline=False)
    embed.add_field(name=f"{prefix}toc_do_gio <th√†nh ph·ªë>", value="Hi·ªÉn th·ªã t·ªëc ƒë·ªô gi√≥ hi·ªán t·∫°i c·ªßa th√†nh ph·ªë b·∫°n cung c·∫•p.", inline=False)
    embed.add_field(name=f"{prefix}img <ƒë·ªëi t∆∞·ª£ng>", value="T√¨m ki·∫øm v√† hi·ªÉn th·ªã ·∫£nh t·ª´ Unsplash v·ªõi t·ª´ kh√≥a b·∫°n cung c·∫•p.", inline=False)
    embed.add_field(name=f"{prefix}dong_nghia <t·ª´>", value="T√¨m ki·∫øm t·ª´ ƒë·ªìng nghƒ©a cho t·ª´ b·∫°n cung c·∫•p.", inline=False)
    embed.add_field(name=f"{prefix}news <t√™n>", value="T√¨m ki·∫øm tin t·ª©c li√™n quan ƒë·∫øn t√™n b·∫°n cung c·∫•p.", inline=False)
    embed.add_field(name=f"{prefix}movie <t√™n phim>", value="T√¨m ki·∫øm th√¥ng tin v·ªÅ phim b·∫°n cung c·∫•p.", inline=False)
    embed.add_field(name=f"{prefix}nuke", value="Xo√° to√†n b·ªô tin nh·∫Øn trong k√™nh hi·ªán t·∫°i (ch·ªâ d√†nh cho qu·∫£n tr·ªã vi√™n).", inline=False)
    await ctx.send(embed=embed)

# @bot.command()
# async def add(ctx, role_name: str):
#     allowed_roles = ["tft", "valorant", "lol"]
#     role_name = role_name.lower()

#     if role_name not in allowed_roles:
#         await ctx.send(f" Vai tr√≤ `{role_name}` kh√¥ng ƒë∆∞·ª£c ph√©p. H√£y ch·ªçn t·ª´: {', '.join(allowed_roles)}.")
#         return

#     role = discord.utils.get(ctx.guild.roles, name=role_name)
#     if role:
#         await ctx.author.add_roles(role)
#         await ctx.send(f'ƒê√£ g√°n vai tr√≤ {role_name} cho {ctx.author.mention}.')
#     else:
#         await ctx.send(f'Vai tr√≤ {role_name} kh√¥ng t·ªìn t·∫°i.')

# @bot.command()
# async def remove(ctx, role_name: str):
#     allowed_roles = ["tft", "valorant", "lol"]
#     role_name = role_name.lower()

#     if role_name not in allowed_roles:
#         await ctx.send(f" Vai tr√≤ `{role_name}` kh√¥ng ƒë∆∞·ª£c ph√©p. H√£y ch·ªçn t·ª´: {', '.join(allowed_roles)}.")
#         return

#     role = discord.utils.get(ctx.guild.roles, name=role_name)
#     if role in ctx.author.roles:
#         await ctx.author.remove_roles(role)
#         await ctx.send(f'ƒê√£ xo√° vai tr√≤ {role_name} kh·ªèi {ctx.author.mention}.')
#     else:
#         await ctx.send(f'B·∫°n kh√¥ng c√≥ vai tr√≤ {role_name}.')

@bot.command()
async def votee(ctx,*, question):
    if not question:
        await ctx.send("Vui l√≤ng cung c·∫•p c√¢u h·ªèi ƒë·ªÉ vote.")
        return

    embed = discord.Embed(title="vote", description=question, color=discord.Color.blue())
    message = await ctx.send(embed=embed)
    await message.add_reaction("üëç")
    await message.add_reaction("üëé")

async def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=vi"

    async with aiohttp.ClientSession() as connect:
        async with connect.get(url) as resp: 
            if resp.status == 200:
                data = await resp.json()
                weather = data['weather'][0]['description']
                return f"üå§Ô∏è Th·ªùi ti·∫øt t·∫°i {city.title()}: {weather}"
            else:
                return "‚ùå L·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n th√†nh ph·ªë."
                 
@bot.command()
async def thoitiet(ctx, *, city: str = None):
    if not city or not city.strip():
        await ctx.send("‚ùå Vui l√≤ng cung c·∫•p t√™n th√†nh ph·ªë. V√≠ d·ª•: `!thoitiet H√† N·ªôi`")
        return
    if len(city) > 50:
        await ctx.send("‚ùå T√™n th√†nh ph·ªë qu√° d√†i.")
        return
    result = await get_weather(city)
    await ctx.send(result)

async def nhietdo(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=vi"

    async with aiohttp.ClientSession() as connect:
        async with connect.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                temp = data['main']['temp']
                max_temp = data['main']['temp_max']
                min_temp = data['main']['temp_min']
                return f"üå°Ô∏è Nhi·ªát ƒë·ªô hi·ªán t·∫°i t·∫°i {city.title()} l√† {temp}¬∞C, cao nh·∫•t {max_temp}¬∞C, th·∫•p nh·∫•t {min_temp}¬∞C"
            else:
                return "‚ùå L·∫•y d·ªØ li·ªáu nhi·ªát ƒë·ªô th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n th√†nh ph·ªë."
            
@bot.command()
async def nhietdo(ctx, *, city: str = None):
    if not city or not city.strip():
        await ctx.send("‚ùå Vui l√≤ng cung c·∫•p t√™n th√†nh ph·ªë. V√≠ d·ª•: `!nhietdo H√† N·ªôi`")
        return
    if len(city) > 50:
        await ctx.send("‚ùå T√™n th√†nh ph·ªë qu√° d√†i.")
        return
    result = await nhietdo(city)
    await ctx.send(result)

async def do_am(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=vi"

    async with aiohttp.ClientSession() as connect:
        async with connect.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                humidity = data['main']['humidity']
                return f"üíß ƒê·ªô ·∫©m hi·ªán t·∫°i t·∫°i {city.title()} l√† {humidity}%"
            else:
                return "‚ùå L·∫•y d·ªØ li·ªáu ƒë·ªô ·∫©m th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n th√†nh ph·ªë."

@bot.command()
async def do_am(ctx, *, city: str = None):
    if not city or not city.strip():
        await ctx.send("‚ùå Vui l√≤ng cung c·∫•p t√™n th√†nh ph·ªë. V√≠ d·ª•: `!doam H√† N·ªôi`")
        return
    if len(city) > 50:
        await ctx.send("‚ùå T√™n th√†nh ph·ªë qu√° d√†i.")
        return
    result = await do_am(city)
    await ctx.send(result)

async def wind_speed(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=vi"

    async with aiohttp.ClientSession() as connect:
        async with connect.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                wind = data['wind']['speed']
                return f"üå¨Ô∏è T·ªëc ƒë·ªô gi√≥ hi·ªán t·∫°i t·∫°i {city.title()} l√† {wind} m/s"
            else:
                return "‚ùå L·∫•y d·ªØ li·ªáu t·ªëc ƒë·ªô gi√≥ th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n th√†nh ph·ªë."
            
@bot.command()
async def toc_do_gio(ctx, *, city: str = None):
    if not city or not city.strip():
        await ctx.send("‚ùå Vui l√≤ng cung c·∫•p t√™n th√†nh ph·ªë. V√≠ d·ª•: `!tocdogio H√† N·ªôi`")
        return
    if len(city) > 50:
        await ctx.send("‚ùå T√™n th√†nh ph·ªë qu√° d√†i.")
        return
    result = await wind_speed(city)
    await ctx.send(result)

async def get_unsplash_image(something):
    url = f"https://api.unsplash.com/photos/random?query={something}&orientation=landscape&client_id={UNSPLASH_API_KEY}"

    async with aiohttp.ClientSession() as connect:
        async with connect.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                img = data['urls']['regular']
                return f"·∫¢nh {something} t·ª´ Unsplash v√† link : {img}"
            else:
                return "‚ùå L·∫•y ·∫£nh th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau."

@bot.command()
async def img(ctx, *, something: str = None):
    if not something or not something.strip():
        await ctx.send("‚ùå Vui l√≤ng cung c·∫•p t√™n ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ t√¨m ki·∫øm ·∫£nh. V√≠ d·ª•: `!img hoa`")
        return
    if len(something) > 50:
        await ctx.send("‚ùå T√™n ƒë·ªëi t∆∞·ª£ng qu√° d√†i.")
        return
    result = await get_unsplash_image(something)
    await ctx.send(result)

async def get_synonym(word):
    url = f"https://api.dictionaryapi.dev/api/v2/entries/en/{word}"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                return f"Kh√¥ng t√¨m th·∫•y t·ª´ ƒë·ªìng nghƒ©a cho '{word}'."

            data = await response.json()

            synonyms = set()

            for meaning in data[0].get("meanings", []):
                synonyms.update(meaning.get("synonyms", []))
                for definition in meaning.get("definitions", []):
                    synonyms.update(definition.get("synonyms", []))

            if synonyms:
                return f"T·ª´ ƒë·ªìng nghƒ©a c·ªßa '{word}' trong nhi·ªÅu ng·ªØ c·∫£nh kh√°c l√†: {', '.join(synonyms)}."

            return f"Kh√¥ng t√¨m th·∫•y t·ª´ ƒë·ªìng nghƒ©a cho '{word}'."

@bot.command()
async def dong_nghia(ctx, *, word: str = None):
    if not word or not word.strip():
        await ctx.send("‚ùå Vui l√≤ng cung c·∫•p m·ªôt t·ª´ ƒë·ªÉ t√¨m ƒë·ªìng nghƒ©a. V√≠ d·ª•: `!dongnghia love`")
        return
    if len(word) > 50:
        await ctx.send("‚ùå T·ª´ qu√° d√†i.")
        return
    result = await get_synonym(word)
    await ctx.send(result)

async def get_news(name):
    url = f"https://newsapi.org/v2/everything?q={name}&sortBy=publishedAt&apiKey={NEWS_API_KEY}&language=vi"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                return "‚ùå Kh√¥ng th·ªÉ l·∫•y tin t·ª©c. Vui l√≤ng th·ª≠ l·∫°i sau."

            data = await response.json()
            articles = data.get("articles", [])

            if not articles:
                return f"Kh√¥ng t√¨m th·∫•y tin t·ª©c li√™n quan ƒë·∫øn '{name}'."

            news_list = []
            for article in articles[:5]:
                title = article.get("title", "Kh√¥ng c√≥ ti√™u ƒë·ªÅ")
                url = article.get("url", "Kh√¥ng c√≥ li√™n k·∫øt")
                news_list.append(f"**{title}**\n{url}")
            return "\n\n".join(news_list)
        
@bot.command()
async def news(ctx, *, name: str = None):
    if not name or not name.strip():
        await ctx.send("‚ùå Vui l√≤ng cung c·∫•p t√™n ƒë·ªÉ t√¨m ki·∫øm tin t·ª©c. V√≠ d·ª•: `!news c√¥ng ngh·ªá`")
        return
    if len(name) > 50:
        await ctx.send("‚ùå T√™n qu√° d√†i.")
        return
    result = await get_news(name)
    await ctx.send(result)

@bot.command()
async def nuke(ctx):
    if ctx.author.guild_permissions.administrator:
        await ctx.channel.purge(limit=5000)
        await ctx.send(f"üí• {ctx.author.display_name} ƒë√£ Nuke channel!") 
    else:
        await ctx.send("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.")

async def get_movie_info(movie_name):
    url = f"https://api.themoviedb.org/3/search/movie?api_key={THE_MOVIE_DB_API_KEY}&query={movie_name}&language=vi-VN"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                return "‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin phim. Vui l√≤ng th·ª≠ l·∫°i sau."

            data = await response.json()
            results = data.get("results", [])

            if not results:
                return f"Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ phim '{movie_name}'."

            movie = results[0]
            title = movie.get("title", "Kh√¥ng c√≥ ti√™u ƒë·ªÅ")
            overview = movie.get("overview", "Kh√¥ng c√≥ m√¥ t·∫£")
            release_date = movie.get("release_date", "Kh√¥ng c√≥ ng√†y ph√°t h√†nh")
            vote_average = movie.get("vote_average", "Kh√¥ng c√≥ ƒë√°nh gi√°")
            poster_path = movie.get("poster_path")

            if poster_path:
                poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}"
            else:
                poster_url = None

            embed = discord.Embed(title=title, description=overview, color=discord.Color.blue())
            embed.add_field(name="Ng√†y ph√°t h√†nh", value=release_date, inline=False)
            embed.add_field(name="ƒê√°nh gi√°", value=vote_average, inline=False)
            if poster_url:
                embed.set_thumbnail(url=poster_url)
            return embed

@bot.command()
async def movie(ctx, *, movie_name: str = None):
    if not movie_name or not movie_name.strip():
        await ctx.send("‚ùå Vui l√≤ng cung c·∫•p t√™n phim ƒë·ªÉ t√¨m ki·∫øm. V√≠ d·ª•: `!movie Inception`")
        return
    if len(movie_name) > 100:
        await ctx.send("‚ùå T√™n phim qu√° d√†i.")
        return
    result = await get_movie_info(movie_name)
    await ctx.send(embed=result)

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i c√∫ ph√°p.")
    elif isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"‚è≥ L·ªánh n√†y ƒëang trong th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i sau {error.retry_after:.2f} gi√¢y.")
    else:
        logging.error(f"ƒê√£ x·∫£y ra l·ªói: {error}")
        await ctx.send("‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën. Vui l√≤ng th·ª≠ l·∫°i sau.")

bot.run(TOKEN)